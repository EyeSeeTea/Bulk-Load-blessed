import _ from "lodash";
import { UseCase } from "../../CompositionRoot";
import Settings from "../../webapp/logic/settings";
import { DataForm } from "../entities/DataForm";
import { CustomTemplate } from "../entities/Template";
import { InstanceRepository } from "../repositories/InstanceRepository";

interface ExecuteOptions {
    settings: Settings;
    customTemplates: CustomTemplate[];
}

export class GetDataFormsForGenerationUseCase implements UseCase {
    constructor(private instance: InstanceRepository) {}

    public async execute(options: ExecuteOptions): Promise<{ dataSets: DataForm[]; programs: DataForm[] }> {
        const dataSets = await this.instance.getDataForms({ type: ["dataSets"] });
        const programs = await this.instance.getDataForms({ type: ["programs"] });

        return {
            dataSets: this.splitCustomAndAutogenerated(dataSets, options),
            programs: this.splitCustomAndAutogenerated(programs, options),
        };
    }

    private splitCustomAndAutogenerated(dataForms: DataForm[], options: ExecuteOptions): DataForm[] {
        const { customTemplates, settings } = options;

        return _(dataForms)
            .flatMap(dataForm => {
                const enabledTemplateIds = settings.getTemplateIdsForDataForm(dataForm);

                return _(customTemplates)
                    .filter(ct => ct.dataFormId.type === "value" && ct.dataFormId.id === dataForm.id)
                    .map(ct => ({ ...dataForm, id: ct.id, name: ct.name }))
                    .concat(settings.isDataFormVisibleForCurrentUser(dataForm.id) ? [dataForm] : [])
                    .filter(template => settings.isDataFormVisibleForCurrentUser(template.id))
                    .filter(template => !enabledTemplateIds || enabledTemplateIds.includes(template.id))
                    .value();
            })
            .sortBy(template => template.name)
            .value();
    }
}
