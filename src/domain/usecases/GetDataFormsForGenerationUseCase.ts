import _ from "lodash";
import Settings from "../../webapp/logic/settings";
import { getGeneratedTemplateId } from "../../webapp/logic/sheetBuilder";
import { DataForm } from "../entities/DataForm";
import { CustomTemplate, DataFormTemplate } from "../entities/Template";
import { InstanceRepository } from "../repositories/InstanceRepository";

interface ExecuteOptions {
    settings: Settings;
    customTemplates: CustomTemplate[];
}

export class GetDataFormsForGenerationUseCase {
    constructor(private instance: InstanceRepository) {}

    public async execute(
        options: ExecuteOptions
    ): Promise<{ dataSets: DataFormTemplate[]; programs: DataFormTemplate[] }> {
        const dataSets = await this.instance.getDataForms({ type: ["dataSets"] });
        const programs = await this.instance.getDataForms({ type: ["programs"] });

        return {
            dataSets: this.splitCustomAndAutogenerated(dataSets, options),
            programs: this.splitCustomAndAutogenerated(programs, options),
        };
    }

    private splitCustomAndAutogenerated(dataForms: DataForm[], options: ExecuteOptions): DataFormTemplate[] {
        const { customTemplates, settings } = options;

        return _(dataForms)
            .flatMap(dataForm => {
                const dataFormAutogenerated: DataFormTemplate = {
                    ...dataForm,
                    templateId: getGeneratedTemplateId(dataForm.type),
                };

                const enabledTemplateIds = settings.getTemplateIdsForDataForm(dataForm);

                const dataFormsSpecificCustom = customTemplates
                    .filter(template => template.dataFormId.type === "value" && template.dataFormId.id === dataForm.id)
                    .map(
                        (template): DataFormTemplate => ({
                            ...dataForm,
                            id: dataForm.id,
                            name: template.name,
                            templateId: template.id,
                        })
                    );

                const dataFormsDefaultCustom = customTemplates
                    .filter(
                        template =>
                            template.isDefault &&
                            template.dataFormType.type === "value" &&
                            template.dataFormType.id === dataForm.type
                    )
                    .map(
                        (template): DataFormTemplate => ({
                            ...dataForm,
                            id: dataForm.id,
                            name: `${dataForm.name} (${template.name})`,
                            templateId: template.id,
                        })
                    );

                return _(dataFormsSpecificCustom)
                    .concat(dataFormsDefaultCustom)
                    .concat(settings.showAutogeneratedForms ? [dataFormAutogenerated] : [])
                    .filter(dataForm_ => {
                        const isAutoGenerated = dataForm_.templateId === dataFormAutogenerated.templateId;
                        return settings.isDataFormVisibleForCurrentUser(
                            isAutoGenerated ? dataForm.id : dataForm_.templateId
                        );
                    })
                    .filter(
                        dataForm_ =>
                            !enabledTemplateIds ||
                            enabledTemplateIds.includes(dataForm_.id) ||
                            enabledTemplateIds.includes(dataForm_.templateId)
                    )
                    .value();
            })
            .sortBy(template => template.name.toLowerCase())
            .value();
    }
}
