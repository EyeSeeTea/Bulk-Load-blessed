import React, { useCallback, useEffect, useMemo, useState } from "react";
import _ from "lodash";
import { ConfirmationDialog, MultiSelector } from "@eyeseetea/d2-ui-components";
import { makeStyles } from "@material-ui/core";

import { NamedRef } from "../../../domain/entities/ReferenceObject";
import { CustomTemplate, getDataFormRef } from "../../../domain/entities/Template";
import i18n from "../../../locales";
import { useAppContext } from "../../contexts/app-context";
import { modelToSelectOption } from "../../utils/refs";
import { Select } from "../select/Select";
import { SettingsFieldsProps } from "./SettingsFields";
import { useDataFormsSelector } from "../../hooks/useDataForms";
import { DataForm } from "../../../domain/entities/DataForm";
import { Maybe } from "../../../types/utils";
import settings from "../../logic/settings";

export interface ModuleTemplateDialogProps extends SettingsFieldsProps {
    title: string;
    onClose: () => void;
    customTemplates: CustomTemplate[];
}

export function DataFormTemplateAssignDialog(props: ModuleTemplateDialogProps): React.ReactElement {
    const { title, onClose, settings, onChange, customTemplates } = props;
    const { d2 } = useAppContext();
    const classes = useStyles();

    const [templates, setTemplates] = useState<NamedRef[]>([]);

    const dataForms = useDataFormsSelector();
    const selectedDataForm = dataForms.selected;

    const defaultTemplates = React.useMemo(
        () =>
            customTemplates.filter(
                t => t.dataFormType.type === "value" && t.dataFormType.id === selectedDataForm?.type && t.isDefault
            ),
        [customTemplates, selectedDataForm]
    );

    useEffect(() => {
        if (!selectedDataForm) return;

        const templateOptions = _(customTemplates)
            .map(template => {
                const ref = getDataFormRef(template);
                return ref.id && ref.type ? { template, ref: { id: ref.id, type: ref.type } } : null;
            })
            .compact()
            .filter(({ ref }) => ref.type === selectedDataForm.type)
            .filter(({ ref }) => selectedDataForm.id === ref.id)
            .map(({ template }) => ({ id: template.id, name: template.name }))
            .concat(settings.showAutogeneratedForms ? [{ id: selectedDataForm.id, name: i18n.t("Autogenerated") }] : [])
            .concat(defaultTemplates.map(t => ({ id: t.id, name: t.name })))
            .value();

        setTemplates(templateOptions);
    }, [customTemplates, selectedDataForm, defaultTemplates, settings.showAutogeneratedForms]);

    const itemOptions = dataForms.options;
    const templatesOptions = useMemo(() => modelToSelectOption(templates), [templates]);

    // If no templates are explicitly assigned to the data form, assume all selected
    const templateIdsSelected = settings.getTemplateIdsForDataForm(selectedDataForm) || templates.map(t => t.id);

    const updateSelection = useCallback(
        (newSelectedIdsFromComponent: string[]) => {
            if (!selectedDataForm) return;

            const newSelectedIds = getSelectionWithAutogeneratedIfPersisted(
                settings,
                selectedDataForm,
                newSelectedIdsFromComponent,
                templateIdsSelected
            );

            const newSettings = settings.updateDataFormTemplateRelationship(selectedDataForm, newSelectedIds);
            onChange(newSettings);
        },
        [selectedDataForm, settings, onChange, templateIdsSelected]
    );

    return (
        <ConfirmationDialog
            isOpen={true}
            title={title}
            maxWidth="lg"
            fullWidth={true}
            onCancel={onClose}
            cancelText={i18n.t("Close")}
        >
            <div className={classes.row}>
                <Select
                    placeholder={i18n.t("Dataset/Program")}
                    options={itemOptions}
                    onChange={dataForms.setSelected}
                    value={selectedDataForm?.id ?? ""}
                />
            </div>

            {selectedDataForm && (
                <div className={classes.row}>
                    <MultiSelector
                        d2={d2}
                        searchFilterLabel={i18n.t("Search templates")}
                        height={300}
                        onChange={updateSelection}
                        options={templatesOptions}
                        selected={templateIdsSelected}
                        ordered={false}
                    />
                </div>
            )}
        </ConfirmationDialog>
    );
}

const useStyles = makeStyles({
    row: { width: "100%", marginBottom: "2em" },
});

function getSelectionWithAutogeneratedIfPersisted(
    settings: settings,
    selectedDataForm: Maybe<DataForm>,
    newSelectedIdsFromComponent: string[],
    templateIdsSelected: string[]
) {
    if (settings.showAutogeneratedForms || !selectedDataForm) {
        return newSelectedIdsFromComponent;
    } else if (templateIdsSelected.includes(selectedDataForm.id)) {
        return _.union(newSelectedIdsFromComponent, [selectedDataForm.id]);
    } else {
        return newSelectedIdsFromComponent;
    }
}
